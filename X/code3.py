import requests
import json
from datetime import datetime
import time
import sqlite3

# ==============================================================================
# --- C·∫§U H√åNH ---
# ==============================================================================
# Ch·ªâ c·∫ßn 1 API Key cho vi·ªác n√†y, v√¨ RPC call r·∫•t r·∫ª
HELIUS_RPC_ENDPOINT = "https://mainnet.helius-rpc.com/?api-key=f34dab6e-7e5b-4b15-80f5-71f115e2796b"
DATABASE_FILE = "profiles.db"
KNOWN_TEAM_WALLECTS = {
    "771zujoMQDHMGyBWu363HNHr3PPXbSkA7X5kiQBpPNSz": "V√≠ G·ªëc / M·∫π",
    "GnE2cQ455ZyvQcP9xfLoVEo4orhyhj8qBz5q1iW1r5nt": "Creator 1 ($BALLZ)",
    "7gbnR6f7EyTyMu6ECf4ndnwREG4TCqtruSvD6gEG4gex": "Creator 2",
    "H9bBXbLgkHrrfnZCvEpGBR4ekWaDeL5LjjkT7SFX7qWK": "Creator 3",
}
# --- C·∫§U H√åNH M·ªöI ---
PROCESSING_CHUNK_SIZE = 1000 # X·ª≠ l√Ω 1000 giao d·ªãch m·ªói l·∫ßn ch·∫°y
SYNC_STATE_KEY_FOR_GRAPH_BUILDER = "graph_builder_last_processed_index"

# ==============================================================================
# --- MODULES ---
# ==============================================================================
def connect_db():
    try:
        conn = sqlite3.connect(DATABASE_FILE, timeout=20)
        conn.row_factory = sqlite3.Row
        return conn, conn.cursor()
    except sqlite3.Error as e:
        print(f"L·ªói khi k·∫øt n·ªëi DB: {e}")
        return None, None

def get_simple_txs_batch(signatures: list):
    """L·∫•y chi ti·∫øt giao d·ªãch c∆° b·∫£n b·∫±ng RPC call, tr·∫£ v·ªÅ danh s√°ch ƒë√£ gi·∫£i m√£."""
    all_details = []
    batch_size = 50 # C√≥ th·ªÉ tƒÉng batch size cho RPC call
    total_batches = -(-len(signatures) // batch_size)
    
    for i in range(0, len(signatures), batch_size):
        batch = signatures[i:i + batch_size]
        current_batch_num = i // batch_size + 1
        print(f"  -> ƒêang l·∫•y chi ti·∫øt RPC l√¥ {current_batch_num}/{total_batches}...", end='\r')
        try:
            payload = [{"jsonrpc": "2.0", "id": sig, "method": "getTransaction", "params": [sig, {"encoding": "jsonParsed", "maxSupportedTransactionVersion": 0}]} for sig in batch]
            response = requests.post(HELIUS_RPC_ENDPOINT, json=payload, timeout=90)
            response.raise_for_status()
            
            results = response.json()
            for res in results:
                if res and res.get('result'):
                    all_details.append(res['result'])
            time.sleep(0.5) # ƒê·ªô tr·ªÖ nh·ªè
        except Exception as e:
            print(f"\nL·ªói khi l·∫•y chi ti·∫øt RPC l√¥ {current_batch_num}: {e}")
    print("\nL·∫•y chi ti·∫øt RPC ho√†n t·∫•t.")
    return all_details

# ==============================================================================
# --- H√ÄM CH√çNH ---
# ==============================================================================
def build_relationship_graph():
    conn, cursor = connect_db()
    if not conn: return
    
    print("="*70)
    print(" B·∫ÆT ƒê·∫¶U X√ÇY D·ª∞NG KHUNG X∆Ø∆†NG ƒê·ªí TH·ªä (GRAPH BUILDER V1.0) ")
    print("="*70)

    # L·∫•y to√†n b·ªô ch·ªØ k√Ω t·ª´ DB
    cursor.execute("SELECT signature FROM raw_transactions ORDER BY blockTime ASC")
    all_signatures = [row['signature'] for row in cursor.fetchall()]
    
    if not all_signatures:
        print("Kh√¥ng c√≥ giao d·ªãch th√¥ n√†o trong DB. Vui l√≤ng ch·∫°y scraper.py tr∆∞·ªõc."); conn.close(); return

    # Kh·ªüi t·∫°o h·ªì s∆° c·ªët l√µi
    for address, name in KNOWN_TEAM_WALLECTS.items():
        cursor.execute("INSERT OR IGNORE INTO profiles (address, name, first_contact_unix) VALUES (?, ?, ?)", (address, name, 0))
    conn.commit()

    # L·∫•y chi ti·∫øt c∆° b·∫£n b·∫±ng RPC
    all_tx_details = get_simple_txs_batch(all_signatures)
    
    print(f"\nüî¨ B·∫Øt ƒë·∫ßu x√¢y d·ª±ng h·ªì s∆° t·ª´ {len(all_tx_details)} giao d·ªãch...")
    cursor.execute("SELECT address FROM profiles")
    known_wallets = {row['address'] for row in cursor.fetchall()}
    new_profiles_created = 0

    for i, tx_data in enumerate(all_tx_details):
        if (i + 1) % 1000 == 0:
            print(f"  -> ƒê√£ x·ª≠ l√Ω {i+1}/{len(all_tx_details)} giao d·ªãch. ƒê√£ t·∫°o {new_profiles_created} h·ªì s∆° m·ªõi.", end='\r')
        
        tx_timestamp = tx_data.get('blockTime', 0)
        meta = tx_data.get('meta')
        accounts = tx_data.get('transaction', {}).get('message', {}).get('accountKeys', [])
        
        if not meta or not accounts: continue

        pre_balances = meta['preBalances']
        post_balances = meta['postBalances']
        
        senders = {accounts[i]['pubkey'] for i, _ in enumerate(accounts) if post_balances[i] < pre_balances[i]}
        
        # Logic l√¢y lan
        if any(s in known_wallets for s in senders):
            receivers = {accounts[i]['pubkey'] for i, _ in enumerate(accounts) if post_balances[i] > pre_balances[i]}
            for receiver in receivers:
                if receiver and receiver not in known_wallets:
                    cursor.execute("INSERT OR IGNORE INTO profiles (address, name, first_contact_unix) VALUES (?, ?, ?)",
                                   (receiver, f"Satellite_{receiver[:4]}", tx_timestamp))
                    known_wallets.add(receiver)
                    new_profiles_created += 1

    conn.commit()
    print(f"\n‚úÖ X√¢y d·ª±ng ƒë·ªì th·ªã ho√†n t·∫•t. T·ªïng c·ªông ƒë√£ t·∫°o {new_profiles_created} h·ªì s∆° m·ªõi.")
    
    cursor.execute("SELECT COUNT(*) FROM profiles")
    print(f"üìä T·ªîNG S·ªê H·ªí S∆† TRONG DATABASE HI·ªÜN T·∫†I: {cursor.fetchone()[0]}")
    
    conn.close()

if __name__ == "__main__":
    build_relationship_graph()