import requests
import json
import sqlite3
import time
from solders.pubkey import Pubkey
from solders.account import Account

# ==============================================================================
# --- C·∫§U H√å-NH ---
# ==============================================================================
HELIUS_RPC_ENDPOINT = "https://mainnet.helius-rpc.com/?api-key=9c0bdddf-d974-48b0-a075-548e8cea1ea0"
DATABASE_FILE = "profiles.db"

# === TOKEN C·∫¶N QU√âT ===
# D√°n ƒë·ªãa ch·ªâ mint c·ªßa token b·∫°n mu·ªën ƒëi·ªÅu tra v√†o ƒë√¢y
TOKEN_MINT_TO_SCAN = "Ce2gx9KGXJ6C9Mp5b5x1sn9Mg87JwEbrQby4Zqo3pump" # V√≠ d·ª•: $WIF
TOKEN_SYMBOL = "$neet" # T√™n ƒë·ªÉ hi·ªÉn th·ªã trong b√°o c√°o

# ==============================================================================
# --- MODULES ---
# ==============================================================================

def connect_db():
    try:
        conn = sqlite3.connect(f"file:{DATABASE_FILE}?mode=ro", uri=True)
        conn.row_factory = sqlite3.Row
        return conn, conn.cursor()
    except sqlite3.Error as e:
        print(f"L·ªói khi k·∫øt n·ªëi DB: {e}")
        return None, None

def get_associated_token_address(owner: Pubkey, mint: Pubkey) -> Pubkey:
    """T√≠nh to√°n ƒë·ªãa ch·ªâ Associated Token Account (ATA)."""
    TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
    ASSOCIATED_TOKEN_PROGRAM_ID = Pubkey.from_string("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")
    
    address, _ = Pubkey.find_program_address(
        [bytes(owner), bytes(TOKEN_PROGRAM_ID), bytes(mint)],
        ASSOCIATED_TOKEN_PROGRAM_ID
    )
    return address

# ==============================================================================
# --- H√ÄM CH√çNH ---
# ==============================================================================
def scan_token_for_insider_holders():
    conn, cursor = connect_db()
    if not conn: return
    
    print("="*70)
    print(f" B·∫ÆT ƒê·∫¶U QU√âT INSIDER HOLDERS CHO TOKEN: {TOKEN_SYMBOL} ")
    print(f" Mint Address: {TOKEN_MINT_TO_SCAN}")
    print("="*70)

    # --- B∆∞·ªõc 1: T·∫£i "B·∫£n ƒë·ªì M·∫°ng l∆∞·ªõi" ---
    print("ƒêang t·∫£i 'B·∫£n ƒë·ªì M·∫°ng l∆∞·ªõi' v√†o b·ªô nh·ªõ...")
    cursor.execute("SELECT address FROM profiles")
    team_wallets = [row['address'] for row in cursor.fetchall()]
    conn.close()
    
    if not team_wallets:
        print("Kh√¥ng t√¨m th·∫•y h·ªì s∆° n√†o trong database."); return
        
    print(f"‚úÖ ƒê√£ t·∫£i {len(team_wallets)} v√≠ 'ng∆∞·ªùi nh√†'. B·∫Øt ƒë·∫ßu qu√©t...")

    # --- B∆∞·ªõc 2: T√≠nh to√°n c√°c ƒë·ªãa ch·ªâ ATA c·∫ßn ki·ªÉm tra ---
    token_mint_pubkey = Pubkey.from_string(TOKEN_MINT_TO_SCAN)
    ata_addresses_to_check = []
    owner_map = {} # D√πng ƒë·ªÉ map ATA v·ªÅ l·∫°i v√≠ owner
    for owner_address in team_wallets:
        try:
            owner_pubkey = Pubkey.from_string(owner_address)
            ata_address = get_associated_token_address(owner_pubkey, token_mint_pubkey)
            ata_addresses_to_check.append(str(ata_address))
            owner_map[str(ata_address)] = owner_address
        except Exception:
            continue # B·ªè qua n·∫øu ƒë·ªãa ch·ªâ v√≠ kh√¥ng h·ª£p l·ªá
            
    # --- B∆∞·ªõc 3: Qu√©t theo l√¥ b·∫±ng getMultipleAccounts ---
    insider_holders = []
    batch_size = 100 # getMultipleAccounts c√≥ th·ªÉ x·ª≠ l√Ω t·ªëi ƒëa 100 t√†i kho·∫£n m·ªói l·∫ßn
    
    for i in range(0, len(ata_addresses_to_check), batch_size):
        batch = ata_addresses_to_check[i:i + batch_size]
        progress = ((i + batch_size) / len(ata_addresses_to_check)) * 100
        print(f"  -> ƒêang qu√©t l√¥ {i//batch_size + 1}/{ -(-len(ata_addresses_to_check)//batch_size)}... ({progress:.1f}%)", end='\r')
        
        try:
            payload = {
                "jsonrpc": "2.0", "id": 1, 
                "method": "getMultipleAccounts",
                "params": [batch, {"encoding": "jsonParsed"}]
            }
            response = requests.post(HELIUS_RPC_ENDPOINT, json=payload, timeout=60)
            response.raise_for_status()
            
            results = response.json().get('result', {}).get('value', [])
            
            for idx, account_data in enumerate(results):
                if account_data: # N·∫øu t√†i kho·∫£n t·ªìn t·∫°i
                    # Gi·∫£i m√£ s·ªë d∆∞
                    balance = int(account_data['data']['parsed']['info']['tokenAmount']['amount'])
                    if balance > 0:
                        ata_address = batch[idx]
                        owner_wallet = owner_map[ata_address]
                        insider_holders.append(owner_wallet)
            time.sleep(1) # Ngh·ªâ gi·ªØa c√°c l√¥
        except Exception as e:
            print(f"\nL·ªói khi qu√©t l√¥: {e}")
            time.sleep(5)
    
    print("\nQu√©t ho√†n t·∫•t.")
    
    # --- B∆∞·ªõc 4: B√°o c√°o k·∫øt qu·∫£ ---
    print("\n" + "="*70)
    print(" B√ÅO C√ÅO K·∫æT QU·∫¢ QU√âT ")
    print("="*70)
    
    if insider_holders:
        print(f"üî• K·∫æT QU·∫¢: T√¨m th·∫•y {len(insider_holders)} v√≠ 'ng∆∞·ªùi nh√†' ƒëang n·∫Øm gi·ªØ token {TOKEN_SYMBOL}!")
        print("   Danh s√°ch (hi·ªÉn th·ªã t·ªëi ƒëa 20):")
        for wallet in insider_holders[:20]:
            print(f"    - {wallet}")
    else:
        print(f"‚úÖ K·∫æT QU·∫¢: Kh√¥ng t√¨m th·∫•y v√≠ 'ng∆∞·ªùi nh√†' n√†o ƒëang n·∫Øm gi·ªØ token {TOKEN_SYMBOL}.")

if __name__ == "__main__":
    scan_token_for_insider_holders()