import requests
import json
from datetime import datetime, timedelta
import time
import sqlite3
import os

# ==============================================================================
# --- C·∫§U H√åNH ---
# ==============================================================================
HELIUS_API_KEY = "b7136879-e7d5-47f7-9aff-d2640767f758"
HELIUS_API_URL = f"https://api.helius.xyz/v0/transactions/?api-key={HELIUS_API_KEY}"
DATABASE_FILE = "profiles.db"
DECODED_CACHE_FILE = "decoded_transactions.json"

KNOWN_TEAM_WALLECTS = {
    "771zujoMQDHMGyBWu363HNHr3PPXbSkA7X5kiQBpPNSz": "V√≠ G·ªëc / M·∫π",
    "GnE2cQ455ZyvQcP9xfLoVEo4orhyhj8qBz5q1iW1r5nt": "Creator 1 ($BALLZ)",
    "7gbnR6f7EyTyMu6ECf4ndnwREG4TCqtruSvD6gEG4gex": "Creator 2",
    "H9bBXbLgkHrrfnZCvEpGBR4ekWaDeL5LjjkT7SFX7qWK": "Creator 3",
}
PUMP_FUN_PROGRAM_ID = "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"

# ==============================================================================
# --- MODULES ---
# ==============================================================================



# === H√ÄM get_transactions_details ƒê√É ƒê∆Ø·ª¢C N√ÇNG C·∫§P ===
def get_transactions_details_robust(signatures: list):
    if not signatures: return []
    all_tx_details, processed_signatures = [], set()
    if os.path.exists(DECODED_CACHE_FILE):
        print(f"‚úÖ T√¨m th·∫•y file cache `{DECODED_CACHE_FILE}`. ƒêang ƒë·ªçc ƒë·ªÉ ti·∫øp t·ª•c...")
        try:
            with open(DECODED_CACHE_FILE, "r") as f: all_tx_details = json.load(f)
            for tx in all_tx_details: processed_signatures.add(tx['signature'])
            print(f"  -> ƒê√£ ƒë·ªçc {len(all_tx_details)} giao d·ªãch t·ª´ cache.")
        except Exception: all_tx_details, processed_signatures = [], set()

    signatures_to_process = [s for s in signatures if s not in processed_signatures]
    if not signatures_to_process:
        print("‚úÖ T·∫•t c·∫£ c√°c chi ti·∫øt giao d·ªãch ƒë√£ c√≥ trong cache.")
        return all_tx_details

    print(f"C√≤n l·∫°i {len(signatures_to_process)} ch·ªØ k√Ω c·∫ßn l·∫•y chi ti·∫øt t·ª´ API...")
    batch_size = 40; total_batches = -(-len(signatures_to_process) // batch_size)
    
    for i in range(0, len(signatures_to_process), batch_size):
        batch = signatures_to_process[i:i + batch_size]; current_batch_num = (len(processed_signatures) // batch_size) + (i // batch_size) + 1
        retries = 10
        for attempt in range(retries):
            print(f"  -> ƒêang x·ª≠ l√Ω l√¥ {current_batch_num} (th·ª≠ l·∫ßn {attempt + 1})...", end='\r')
            try:
                response = requests.post(HELIUS_API_URL, json={"transactions": batch}, timeout=120)
                if response.status_code == 429: raise requests.exceptions.HTTPError(f"429 Too Many Requests")
                response.raise_for_status()
                batch_details = response.json(); all_tx_details.extend(batch_details)
                with open(DECODED_CACHE_FILE, "w") as f: json.dump(all_tx_details, f)
                print(f"  -> X·ª≠ l√Ω l√¥ {current_batch_num}/{total_batches + (len(processed_signatures) // batch_size)} th√†nh c√¥ng. ƒê√£ l∆∞u cache. T·ªïng: {len(all_tx_details)} giao d·ªãch.   ")
                time.sleep(2)
                break
            except requests.exceptions.RequestException as e:
                wait_time = 60
                print(f"\nL·ªói t·∫°i l√¥ {current_batch_num}: {e}. Ch·ªù {wait_time} gi√¢y ƒë·ªÉ th·ª≠ l·∫°i...")
                if attempt < retries - 1: time.sleep(wait_time)
                else: print(f"\n[!!!] B·ªè qua l√¥ {current_batch_num} sau {retries} l·∫ßn th·ª≠ th·∫•t b·∫°i.")
    print(f"\nL·∫•y chi ti·∫øt ho√†n t·∫•t. T·ªïng c·ªông c√≥ {len(all_tx_details)} chi ti·∫øt giao d·ªãch.")
    return all_tx_details


def get_transactions_details(signatures: list):
    """
    L·∫•y chi ti·∫øt giao d·ªãch v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i th√¥ng minh ƒë·ªÉ x·ª≠ l√Ω rate limit.
    """
    if not signatures: return []
    batch_size = 50
    all_tx_details = []
    total_batches = -(-len(signatures) // batch_size)
    print(f"B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt cho {len(signatures)} ch·ªØ k√Ω...")

    for i in range(0, len(signatures), batch_size):
        batch = signatures[i:i + batch_size]
        current_batch_num = i//batch_size + 1
        
        # Logic th·ª≠ l·∫°i
        retries = 5
        for attempt in range(retries):
            print(f"  -> ƒêang x·ª≠ l√Ω l√¥ {current_batch_num}/{total_batches} (th·ª≠ l·∫ßn {attempt + 1})...", end='\r')
            try:
                response = requests.post(HELIUS_API_URL, json={"transactions": batch}, timeout=90)
                
                # N·∫øu g·∫∑p l·ªói 429, n√©m ra m·ªôt exception ƒë·ªÉ k√≠ch ho·∫°t c∆° ch·∫ø th·ª≠ l·∫°i
                if response.status_code == 429:
                    raise requests.exceptions.HTTPError(f"429 Too Many Requests")

                response.raise_for_status() # N√©m l·ªói cho c√°c status code 4xx/5xx kh√°c
                
                all_tx_details.extend(response.json())
                time.sleep(1.2) # TƒÉng nh·∫π ƒë·ªô tr·ªÖ ƒë·ªÉ "l·ªãch s·ª±" h∆°n
                break # N·∫øu th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p th·ª≠ l·∫°i
            
            except requests.exceptions.RequestException as e:
                print(f"\nL·ªói t·∫°i l√¥ {current_batch_num}: {e}. ƒêang ch·ªù ƒë·ªÉ th·ª≠ l·∫°i...")
                if attempt < retries - 1:
                    time.sleep(15) # Ch·ªù 15 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
                else:
                    print(f"\n[!!!] B·ªè qua l√¥ {current_batch_num} sau {retries} l·∫ßn th·ª≠ th·∫•t b·∫°i.")

    print(f"\nL·∫•y chi ti·∫øt ho√†n t·∫•t. L·∫•y ƒë∆∞·ª£c {len(all_tx_details)}/{len(signatures)} chi ti·∫øt giao d·ªãch.")
    return all_tx_details


def connect_db():
    try:
        conn = sqlite3.connect(DATABASE_FILE, timeout=20)
        conn.row_factory = sqlite3.Row
        return conn, conn.cursor()
    except sqlite3.Error as e:
        print(f"L·ªói khi k·∫øt n·ªëi DB: {e}")
        return None, None

def format_time(unix_ts):
    if not unix_ts or unix_ts in [0, float('inf')]: return "N/A"
    return datetime.fromtimestamp(unix_ts).strftime('%Y-%m-%d %H:%M UTC')

# ==============================================================================
# --- H√ÄM PH√ÇN T√çCH CH√çNH ---
# ==============================================================================

def process_and_build_graph():
    conn, cursor = connect_db()
    if not conn: return

    print("="*70)
    print(" B·∫ÆT ƒê·∫¶U X√ÇY D·ª∞NG ƒê·ªí TH·ªä M·∫†NG L∆Ø·ªöI (ANALYZER V4.7) ")
    print("="*70)

    # --- B∆∞·ªõc 1: L·∫•y chi ti·∫øt giao d·ªãch (∆∞u ti√™n cache) ---
    decoded_transactions = []
    if os.path.exists(DECODED_CACHE_FILE):
        print(f"‚úÖ T√¨m th·∫•y file cache `{DECODED_CACHE_FILE}`. ƒêang ƒë·ªçc d·ªØ li·ªáu...")
        with open(DECODED_CACHE_FILE, "r") as f:
            decoded_transactions = json.load(f)
    else:
        print("Kh√¥ng t√¨m th·∫•y file cache. S·∫Ω l·∫•y d·ªØ li·ªáu t·ª´ API (qu√° tr√¨nh n√†y s·∫Ω l√¢u)...")
        cursor.execute("SELECT signature FROM raw_transactions ORDER BY blockTime ASC")
        signatures_to_process = [row['signature'] for row in cursor.fetchall()]
        if signatures_to_process:
            decoded_transactions = get_transactions_details_robust(signatures_to_process)
            print(f"ƒêang l∆∞u {len(decoded_transactions)} giao d·ªãch v√†o cache...")
            with open(DECODED_CACHE_FILE, "w") as f: json.dump(decoded_transactions, f)
            print("‚úÖ ƒê√£ l∆∞u v√†o cache th√†nh c√¥ng.")

    if not decoded_transactions:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt ƒë·ªÉ x·ª≠ l√Ω."); conn.close(); return

    # --- B∆∞·ªõc 2: X√¢y d·ª±ng ƒë·ªì th·ªã (Graph Building) ---
    print(f"\nüî¨ B·∫Øt ƒë·∫ßu x√¢y d·ª±ng h·ªì s∆° t·ª´ {len(decoded_transactions)} giao d·ªãch...")
    
    # Kh·ªüi t·∫°o h·ªì s∆° cho c√°c v√≠ c·ªët l√µi
    for address, name in KNOWN_TEAM_WALLECTS.items():
        cursor.execute("INSERT OR IGNORE INTO profiles (address, name, first_contact_unix) VALUES (?, ?, ?)", (address, name, 0))
    conn.commit()

    # B·∫Øt ƒë·∫ßu thu·∫≠t to√°n "l√¢y lan"
    known_wallets_in_db = set(KNOWN_TEAM_WALLECTS.keys())
    new_profiles_created = 0

    for i, tx_data in enumerate(decoded_transactions):
        if (i + 1) % 1000 == 0:
            print(f"  -> ƒê√£ x·ª≠ l√Ω {i+1}/{len(decoded_transactions)} giao d·ªãch. ƒê√£ t·∫°o {new_profiles_created} h·ªì s∆° m·ªõi.", end='\r')
        
        tx_timestamp = tx_data.get('timestamp', 0)
        
        # 1. Logic l√¢y lan: T√¨m v√≠ m·ªõi ƒë∆∞·ª£c c·∫•p v·ªën
        for transfer in tx_data.get("events", {}).get("nativeTransfers", []):
            sender, receiver = transfer.get("fromUserAccount"), transfer.get("toUserAccount")
            amount_sol = transfer['amount'] / 1e9
            
            # N·∫øu ng∆∞·ªùi g·ª≠i ƒë√£ c√≥ trong h·ªì s∆° v√† ng∆∞·ªùi nh·∫≠n ch∆∞a c√≥ -> th√™m ng∆∞·ªùi nh·∫≠n v√†o
            if sender in known_wallets_in_db and receiver and receiver not in known_wallets_in_db:
                cursor.execute("INSERT OR IGNORE INTO profiles (address, name, first_contact_unix) VALUES (?, ?, ?)",
                               (receiver, f"Satellite_{receiver[:4]}", tx_timestamp))
                known_wallets_in_db.add(receiver)
                new_profiles_created += 1

            # C·∫≠p nh·∫≠t th√¥ng tin cho ng∆∞·ªùi nh·∫≠n (d√π m·ªõi hay c≈©)
            if receiver:
                cursor.execute("UPDATE profiles SET sol_funded = sol_funded + ?, last_activity_unix = max(ifnull(last_activity_unix, 0), ?) WHERE address = ?", 
                               (amount_sol, tx_timestamp, receiver))

        # 2. C·∫≠p nh·∫≠t c√°c b·ªô ƒë·∫øm h√†nh vi cho ng∆∞·ªùi tr·∫£ ph√≠
        fee_payer = tx_data.get("feePayer")
        if fee_payer and fee_payer in known_wallets_in_db:
            cursor.execute("UPDATE profiles SET total_tx = total_tx + 1, last_activity_unix = max(ifnull(last_activity_unix, 0), ?) WHERE address = ?",
                           (tx_timestamp, fee_payer))
            if tx_data.get("type") == "SWAP":
                cursor.execute("UPDATE profiles SET swap_count = swap_count + 1 WHERE address = ?", (fee_payer,))
            if "pump.fun" in tx_data.get("source", "").lower():
                for inst in tx_data.get("transaction", {}).get("message", {}).get("instructions", []):
                    if inst.get("programId") == PUMP_FUN_PROGRAM_ID and len(inst.get("accounts", [])) > 6:
                        creator = inst["accounts"][6]
                        if creator == fee_payer: # ƒê·∫£m b·∫£o fee_payer ch√≠nh l√† creator
                            cursor.execute("UPDATE profiles SET pump_fun_creations = pump_fun_creations + 1 WHERE address = ?", (creator,))
                            # Th√™m token v√†o b·∫£ng created_tokens
                            token_mint = inst["accounts"][0]
                            cursor.execute("INSERT OR IGNORE INTO created_tokens (mint_address, creator_address, creation_date_unix, status) VALUES (?, ?, ?, ?)",
                                           (token_mint, creator, tx_timestamp, 'New'))
                            break # ƒê√£ t√¨m th·∫•y, tho√°t v√≤ng l·∫∑p instructions
        
        if (i + 1) % 500 == 0: conn.commit()
        
    conn.commit()
    print(f"\n‚úÖ X√¢y d·ª±ng/c·∫≠p nh·∫≠t h·ªì s∆° ho√†n t·∫•t. T·ªïng c·ªông ƒë√£ t·∫°o {new_profiles_created} h·ªì s∆° m·ªõi.")
    
    # --- B∆∞·ªõc 3: C·∫≠p nh·∫≠t vai tr√≤ t·ªïng h·ª£p ---
    print("\nüîÑ ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i v√† vai tr√≤ t·ªïng h·ª£p...")
    cursor.execute("SELECT address, total_tx, pump_fun_creations, swap_count, last_activity_unix FROM profiles")
    all_profiles_data = cursor.fetchall()
    seven_days_ago_unix = (datetime.now() - timedelta(days=7)).timestamp()
    updates_to_perform = []
    for profile in all_profiles_data:
        roles = set()
        if profile['last_activity_unix'] and profile['last_activity_unix'] < seven_days_ago_unix: roles.add("Sleeper")
        else: roles.add("Active")
        if profile['pump_fun_creations'] > 0: roles.add("Creator")
        if profile['swap_count'] > 5: roles.add("Trader")
        updates_to_perform.append((json.dumps(list(roles)), profile['address']))
    
    cursor.executemany("UPDATE profiles SET roles = ? WHERE address = ?", updates_to_perform)
    conn.commit()
    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t vai tr√≤ cho {len(all_profiles_data)} h·ªì s∆°.")

    conn.close()
    
    # --- B∆∞·ªõc 4: In B√°o c√°o Nhanh sau khi x·ª≠ l√Ω ---
    print("\n" + "="*70)
    print(" B√ÅO C√ÅO NHANH SAU KHI X·ª¨ L√ù ")
    print("="*70)
    conn, cursor = connect_db()
    if conn:
        cursor.execute("SELECT COUNT(*) FROM profiles")
        total_profiles = cursor.fetchone()[0]
        print(f"üìä T·ªîNG S·ªê H·ªí S∆† TRONG DATABASE: {total_profiles}")
        cursor.execute("SELECT COUNT(*), roles FROM profiles GROUP BY roles")
        print("\nüìä PH√ÇN B·ªê VAI TR√í HI·ªÜN T·∫†I:")
        for row in cursor.fetchall():
            print(f"  - {row['roles'] if row['roles'] else 'Ch∆∞a x√°c ƒë·ªãnh'}: {row['COUNT(*)']} v√≠")
        conn.close()

    print("\n" + "="*70)
    print(" HO√ÄN T·∫§T PH√ÇN T√çCH. DATABASE ƒê√É S·∫¥N S√ÄNG CHO REPORTER.PY. ")
    print("="*70)

if __name__ == "__main__":
    process_and_build_graph()